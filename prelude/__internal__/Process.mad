import type { Maybe } from "Maybe"
import Wish from "Wish"
import Dictionary from "Dictionary"
import String from "String"
import List from "List"


// exit code, stdout, stderr
export alias CommandResult = {
  exitCode :: Integer,
  stdout :: String,
  stderr :: String  
}


makeCommandResult :: Integer -> String -> String -> CommandResult
makeCommandResult = (exitCode, stdout, stderr) => ({
  exitCode,
  stdout,
  stderr,
})

#iftarget js

#- import { spawn as spawnJs } from "child_process" -#

// TODO: change API to String -> List String -> Options -> Wish CommandResult CommandResult
// to match the api from libuv and node
exec :: String -> Wish.Wish CommandResult CommandResult
export exec = (command) => Wish.Wish((bad, good) => #- {
  let stdoutChunks = []
  let stderrChunks = []
  const proc = spawnJs(command, [], { shell: true })

  proc.stdout.on("data", (chunk) => {
    stdoutChunks.push(Buffer.from(chunk, 'binary'));
  })

  proc.stderr.on("data", (chunk) => {
    stderrChunks.push(Buffer.from(chunk, 'binary'));
  })

  proc.on('close', (code) => {
    const stdoutBuffer = Buffer.concat(stdoutChunks)
    const stderrBuffer = Buffer.concat(stderrChunks)

    if (code === 0) {
      good(makeCommandResult(0)(stdoutBuffer.toString())(stderrBuffer.toString()))
    } else {
      bad(makeCommandResult(code)(stdoutBuffer.toString())(stderrBuffer.toString()))
    }
  });
} -#)

#-
const makeArgs = () => {
  let list = {}
  let start = list
  Object.keys(process.argv.slice(0)).forEach((key) => {
    list = list.n = { v: process.argv[key], n: null }
  }, {})
  return {
    n: start.n.n.n,
    v: start.n.v + " " + start.n.n.v
  }
}
-#


Argv :: List String
export Argv = #- makeArgs() -#


#-
const buildEnvImpl = (dict) => {
  let list = {}
  let start = list
  Object.keys(process.env).forEach((key) => {
    list = list.n = { v: [key, process.env[key]], n: null }
  }, {})
  return Dictionary.fromList(dict)(start.n)
}
-#

envFFI :: Comparable a => Dictionary a String
envFFI = extern "buildEnvImpl"

Env :: Dictionary String String
export Env = envFFI


getCurrentPath :: Wish.Wish a String
export getCurrentPath = of(#- process.cwd() -#)


getExecutablePath :: Wish.Wish String String
export getExecutablePath = of(#- process.argv[1] -#)

#elseif llvm
import { Just } from "Maybe"
import { Wish } from "Wish"

getArgsFFI :: {} -> List String
getArgsFFI = extern "madlib__process__internal__getArgs"


Argv :: List String
export Argv = getArgsFFI({})


getEnvFFI :: {} -> List #[String, String]
getEnvFFI = extern "madlib__process__internal__getEnv"


Env :: Dictionary String String
export Env = Dictionary.fromList(getEnvFFI({}))


getCurrentPathFFI :: {} -> String
getCurrentPathFFI = extern "madlib__process__internal__getCurrentPath"

getCurrentPath :: Wish a String
export getCurrentPath = Wish((_, good) => good(getCurrentPathFFI()))


execFFI :: String -> List String -> (Integer -> String -> String -> {}) -> {}
execFFI = extern "madlib__process__exec"


// TODO: change API to String -> List String -> Options -> Wish CommandResult CommandResult
// to match the api from libuv and node
exec :: String -> Wish.Wish CommandResult CommandResult
export exec = (command) => Wish.Wish((bad, good) => {
  commandSplit = String.words(command)
  argv = List.drop(1, commandSplit)

  return where(List.nth(0, commandSplit)) {
    Just(cmd) =>
      execFFI(
        cmd,
        argv,
        (exitCode, stdout, stderr) =>
          exitCode != 0
            ? bad(makeCommandResult(exitCode, stdout, stderr))
            : good(makeCommandResult(exitCode, stdout, stderr))
      )
  }
})

#endif

getEnv :: String -> Maybe String
export getEnv = (name) => Dictionary.get(name, Env)
